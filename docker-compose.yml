version: '3.3'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oms_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: raisul
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: order_management_system
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - oms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raisul -d order_management_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oms_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - oms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms_app
    restart: unless-stopped
    ports:
      - "8089:8089"
    environment:
      # Database connection
      DB_USER_READ: raisul
      DB_USER_WRITE: raisul
      DB_PASSWORD: 123456
      DB_DRIVER: postgres
      DB_NAME: order_management_system
      DB_HOST_READ: postgres
      DB_HOST_WRITE: postgres
      DB_PORT_READ: 5432
      DB_PORT_WRITE: 5432
      DB_MAX_OPEN_CONNECTION: 10
      DB_MAX_IDLE_CONNECTION: 5
      DB_CONN_MAX_LIFE: 360s

      # Application
      PORT: 8089

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # JWT
      ACCESS_TOKEN_EXPIRATION_TIME: 600s
      REFRESH_TOKEN_EXPIRATION_TIME: 12000s
    depends_on:
      - postgres
      - redis
    networks:
      - oms_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  oms_network:
    driver: bridge